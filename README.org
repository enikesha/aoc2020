* Advent of Code 2020

** 1.12: x86_64 assembler
*** Part 1: O(nlogn), quicksort with double-sided search
#+BEGIN_SRC bash
as --64 day1_1.s -o day1_1.o && ld -melf_x86_64 -s day1_1.o -o day1_1
./day1_1 < day1_input.txt
#+END_SRC

*** Part 2: O(n2logn), same algo as part 1 but with outer loop of third term which is skipped in the main algo
#+BEGIN_SRC bash
as --64 day1_2.s -o day1_2.o && ld -melf_x86_64 -s day1_2.o -o day1_2
./day1_2 < day1_input.txt
#+END_SRC

** 2.12: AWK
*** Part 1: Regex cut out other chars then regex match repeated char
#+BEGIN_SRC bash
awk -f day2_1.awk day2_input.txt
#+END_SRC

*** Part 2: Basic check string elements
#+BEGIN_SRC bash
awk -f day2_2.awk day2_input.txt
#+END_SRC
** 3.12: bash
*** Part 1: Iterate over lines with offset modulus
#+BEGIN_SRC bash
bash day3_1.sh 3 1 day3_input.txt
#+END_SRC
*** Part 2: Run part 1 with different slopes
#+BEGIN_SRC bash
bash day3_2.sh day3_input.txt
#+END_SRC
** 4.12: C
*** Part 1: Use bitmask as fields set, pointer math to split fields
#+BEGIN_SRC bash
gcc day4_1.c -o day4_1
./day4_1 < day4_input.txt
#+END_SRC
*** Part 2: Validation over part 1
#+BEGIN_SRC bash
gcc day4_2.c -o day4_2
./day4_2 < day4_input.txt
#+END_SRC
** 5.12: C#
Parse binary, use sequence sum formula to find missing element
#+BEGIN_SRC bash
cd day5
dotnet run < input.txt
#+END_SRC
** 6.12: C++
std set with map
#+BEGIN_SRC bash
gcc day6.cpp -lstdc++ -o day6
./day6 < input.txt
#+END_SRC
** 7.12: Clojure
Stupid mashup of bfs and dfs
#+BEGIN_SRC bash
clj -X day7/part1 < day7_input.txt
clj -X day7/part2 < day7_input.txt
#+END_SRC
** 8.12: Common lisp
Plain execution with history tracking and brute part2
#+BEGIN_SRC bash
sbcl --load day8.lisp --eval '(day8)' < day8_input.txt
sbcl --load day8.lisp --eval '(day8-2)' < day8_input.txt
#+END_SRC
** 9.12: Erlang
Linear with pre-sorted/pre-summed lists with fifo queues.
#+BEGIN_SRC bash
erl
> c(day9).
> day9:part1("day9_input.txt", 25).
> day9:part2("day9_input.txt", 69316178).
#+END_SRC
** 10.12: F#
Calc continious ranges, manual calculated permutations based on range lenght
#+BEGIN_SRC bash
cd day10
dotnet run
#+END_SRC
** 11.12
*** Go
Simple loops
#+BEGIN_SRC bash
go run day11.go
#+END_SRC
*** Assembler
Tried to optimize on assembly level. Multiple tricks are used.
#+BEGIN_SRC bash
as --64 day11.s -o day11.o && ld -melf_x86_64 -s day11.o -o day11_as
./day11_as day111_input.txt
#+END_SRC

This gives the following result looping the both parts 100 times:
#+BEGIN_SRC bash
enikesha@enikesha-desktop:~/dev/aoc2020$ time ./day11_as day11_input.txt > /dev/null

real	0m5.127s
user	0m5.125s
sys	0m0.000s
enikesha@enikesha-desktop:~/dev/aoc2020$ time ./day11_go > /dev/null

real	0m12.658s
user	0m13.009s
sys	0m0.157s
#+END_SRC
** 12.12: Haskell
Ok, haskell's learning curve is quite steep. Otherwise simple instruction processing
#+BEGIN_SRC bash
ghci
> :l day12
*Day12> day12
*Day12> day12_1
#+END_SRC
** 13.12: Java
Chinese reminder theorem implementation.
#+BEGIN_SRC bash
javac day13.java && java day13
#+END_SRC
** 14.12: ECMA Script
BigInt, reduce and explode masked addresses
#+BEGIN_SRC bash
paste in FF/Chrome console on advent day page
#+END_SRC
** 15.12:
*** Kotlin
Unboxed IntArray for perf optimization
#+BEGIN_SRC bash
kotlinc day15.kt -include-runtime -d day15.jar && java -jar day15.jar
#+END_SRC
*** Assembler
All I could get out of it
#+BEGIN_SRC bash
as --64 day15.s -o day15.o && ld -melf_x86_64 -s day15.o -o day15
#+END_SRC

With the following results
#+BEGIN_SRC bash
enikesha@enikesha-desktop:~/dev/aoc2020$ time java -jar day15.jar
30000000: 689

real	0m0.759s
user	0m0.791s
sys	0m0.100s
enikesha@enikesha-desktop:~/dev/aoc2020$ time ./day15
689

real	0m0.597s
user	0m0.544s
sys	0m0.052s
#+END_SRC
** 16.12: Lua
Good ol' imperative
#+BEGIN_SRC bash
lua day16.lua < day16_input.txt
#+END_SRC

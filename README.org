* Advent of Code 2020

** 1.12: x86_64 assembler
*** Part 1: O(nlogn), quicksort with double-sided search
#+BEGIN_SRC bash
as --64 day1_1.s -o day1_1.o && ld -melf_x86_64 -s day1_1.o -o day1_1
./day1_1 < day1_input.txt
#+END_SRC

*** Part 2: O(n2logn), same algo as part 1 but with outer loop of third term which is skipped in the main algo
#+BEGIN_SRC bash
as --64 day1_2.s -o day1_2.o && ld -melf_x86_64 -s day1_2.o -o day1_2
./day1_2 < day1_input.txt
#+END_SRC

** 2.12: AWK
*** Part 1: Regex cut out other chars then regex match repeated char
#+BEGIN_SRC bash
awk -f day2_1.awk day2_input.txt
#+END_SRC

*** Part 2: Basic check string elements
#+BEGIN_SRC bash
awk -f day2_2.awk day2_input.txt
#+END_SRC
** 3.12: bash
*** Part 1: Iterate over lines with offset modulus
#+BEGIN_SRC bash
bash day3_1.sh 3 1 day3_input.txt
#+END_SRC
*** Part 2: Run part 1 with different slopes
#+BEGIN_SRC bash
bash day3_2.sh day3_input.txt
#+END_SRC
** 4.12: C
*** Part 1: Use bitmask as fields set, pointer math to split fields
#+BEGIN_SRC bash
gcc day4_1.c -o day4_1
./day4_1 < day4_input.txt
#+END_SRC
*** Part 2: Validation over part 1
#+BEGIN_SRC bash
gcc day4_2.c -o day4_2
./day4_2 < day4_input.txt
#+END_SRC
** 5.12: C#
Parse binary, use sequence sum formula to find missing element
#+BEGIN_SRC bash
cd day5
dotnet run < input.txt
#+END_SRC
